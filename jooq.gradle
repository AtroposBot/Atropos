import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.Database
import org.jooq.meta.jaxb.ForcedType
import org.jooq.meta.jaxb.Generator
import org.jooq.meta.jaxb.Jdbc
import org.jooq.meta.jaxb.Target

buildscript {

    repositories {
        mavenCentral()
        maven {
            url = 'https://mvnrepository.com/artifact/'
        }
    }

    dependencies {
        classpath group: 'org.jooq', name: 'jooq', version: '3.19.17'
        classpath group: 'org.jooq', name: 'jooq-meta', version: '3.19.17'
        classpath group: 'org.jooq', name: 'jooq-codegen', version: '3.19.17'
        classpath group: 'com.mysql', name: 'mysql-connector-j', version: '9.1.0'
    }
}

// enter conn info below for codegen
ext {
    url = 'jdbc:mysql://localhost/atropos'
    user = 'bot'
    password = 'password1'
    schema = 'atropos'
    driver = 'com.mysql.cj.jdbc.Driver'
    jooqDbImpl = 'org.jooq.meta.mariadb.MariaDBDatabase'
    packageName = 'dev.laarryy.atropos.jooq'
    genpath = new File("${projectDir}/build/generated-src/main/java")
}

sourceSets.configureEach { ext.purpose = null }

sourceSets.main.java.srcDirs += genpath.toString()

tasks.register('generateCode') {

    group = 'Custom'
    description = 'Generate class files for database tables!'
    if (!genpath.exists()) {
        genpath.mkdirs()
    }

    org.jooq.meta.jaxb.Configuration configuration = new org.jooq.meta.jaxb.Configuration()
            .withJdbc(new Jdbc()
                    .withDriver(driver)
                    .withUrl(url)
                    .withUser(user)
                    .withPassword(password)
            )
            .withGenerator(new Generator()
                    .withDatabase(new Database()
                            .withName(jooqDbImpl)
                            .withIncludes(".*")
                            .withExcludes("")
                            .withInputSchema(schema)
                            .withForcedTypes(
                                    new ForcedType()
                                    .withUserType("discord4j.common.util.Snowflake")
                                    .withConverter("dev.laarryy.atropos.utils.converters.LongToSnowflakeConverter")
                                    .withGenericConverter(false)
                                    .withIncludeExpression(".*snowflake"),
                                    new ForcedType()
                                    .withUserType("java.util.regex.Pattern")
                                    .withConverter("dev.laarryy.atropos.utils.converters.StringToPatternConverter")
                                    .withIncludeExpression(".*regex.*"),
                                    new ForcedType()
                                    .withUserType("java.lang.Boolean")
                                    .withConverter("dev.laarryy.atropos.utils.converters.ByteToBooleanConverter")
                                    .withIncludeExpression(".*permanent|.*automatic|.*did_dm|.*end_date_passed|.*automatic_end|.*success|.*deleted|.*stop_joins|.*anti_scam|.*dehoist"),
                                    new ForcedType()
                                    .withName("INSTANT")
                                    .withIncludeExpression(".*date")
                            )
                    )
                    .withTarget(new Target()
                            .withPackageName(packageName)
                            .withDirectory(genpath.toString())
                    )
            );

    GenerationTool.generate(configuration);
}

/*
tasks.register('deleteGeneratedCode') {
    delete genpath
}*/
