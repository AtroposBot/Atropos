/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Converters;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.ServerUserRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerUser extends TableImpl<ServerUserRecord> {

    private static final long serialVersionUID = 1L;

    public static final ServerUser SERVER_USER = new ServerUser();

    @Override
    @NonNull
    public Class<ServerUserRecord> getRecordType() {
        return ServerUserRecord.class;
    }

    public final TableField<ServerUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<ServerUserRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<ServerUserRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<ServerUserRecord, Instant> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)).asConvertedDataType(Converters.INSTANT), this, "");

    private ServerUser(Name alias, Table<ServerUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerUser(Name alias, Table<ServerUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public ServerUser(String alias) {
        this(DSL.name(alias), SERVER_USER);
    }

    public ServerUser(Name alias) {
        this(alias, SERVER_USER);
    }

    public ServerUser() {
        this(DSL.name("server_user"), null);
    }

    public <O extends Record> ServerUser(Table<O> child, ForeignKey<O, ServerUserRecord> key) {
        super(child, key, SERVER_USER);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return null;
    }

    @Override
    @NonNull
    public Identity<ServerUserRecord, Integer> getIdentity() {
        return (Identity<ServerUserRecord, Integer>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<ServerUserRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_USER_PRIMARY;
    }

    @Override
    @NonNull
    public List<UniqueKey<ServerUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SERVER_USER_ID);
    }

    @Override
    @NonNull
    public List<ForeignKey<ServerUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_USER_IBFK_1, Keys.SERVER_USER_IBFK_2);
    }

    private transient Users _users;
    private transient Servers _servers;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.SERVER_USER_IBFK_1);

        return _users;
    }

    public Servers servers() {
        if (_servers == null)
            _servers = new Servers(this, Keys.SERVER_USER_IBFK_2);

        return _servers;
    }

    @Override
    @NonNull
    public ServerUser as(String alias) {
        return new ServerUser(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public ServerUser as(Name alias) {
        return new ServerUser(alias, this);
    }

    @Override
    @NonNull
    public ServerUser as(Table<?> alias) {
        return new ServerUser(alias.getQualifiedName(), this);
    }

    @Override
    @NonNull
    public ServerUser rename(String name) {
        return new ServerUser(DSL.name(name), null);
    }

    @Override
    @NonNull
    public ServerUser rename(Name name) {
        return new ServerUser(name, null);
    }

    @Override
    @NonNull
    public ServerUser rename(Table<?> name) {
        return new ServerUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row4<Integer, Integer, Integer, Instant> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
