/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Atropos;
import dev.laarryy.atropos.jooq.Indexes;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.ServerBlacklistRecord;
import dev.laarryy.atropos.jooq.tables.Servers.ServersPath;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerBlacklist extends TableImpl<ServerBlacklistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>atropos.server_blacklist</code>
     */
    public static final ServerBlacklist SERVER_BLACKLIST = new ServerBlacklist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerBlacklistRecord> getRecordType() {
        return ServerBlacklistRecord.class;
    }

    /**
     * The column <code>atropos.server_blacklist.id</code>.
     */
    public final TableField<ServerBlacklistRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>atropos.server_blacklist.server_id</code>.
     */
    public final TableField<ServerBlacklistRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>atropos.server_blacklist.regex_trigger</code>.
     */
    public final TableField<ServerBlacklistRecord, String> REGEX_TRIGGER = createField(DSL.name("regex_trigger"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>atropos.server_blacklist.type</code>.
     */
    public final TableField<ServerBlacklistRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>atropos.server_blacklist.action</code>.
     */
    public final TableField<ServerBlacklistRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ServerBlacklist(Name alias, Table<ServerBlacklistRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServerBlacklist(Name alias, Table<ServerBlacklistRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>atropos.server_blacklist</code> table reference
     */
    public ServerBlacklist(String alias) {
        this(DSL.name(alias), SERVER_BLACKLIST);
    }

    /**
     * Create an aliased <code>atropos.server_blacklist</code> table reference
     */
    public ServerBlacklist(Name alias) {
        this(alias, SERVER_BLACKLIST);
    }

    /**
     * Create a <code>atropos.server_blacklist</code> table reference
     */
    public ServerBlacklist() {
        this(DSL.name("server_blacklist"), null);
    }

    public <O extends Record> ServerBlacklist(Table<O> path, ForeignKey<O, ServerBlacklistRecord> childPath, InverseForeignKey<O, ServerBlacklistRecord> parentPath) {
        super(path, childPath, parentPath, SERVER_BLACKLIST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServerBlacklistPath extends ServerBlacklist implements Path<ServerBlacklistRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServerBlacklistPath(Table<O> path, ForeignKey<O, ServerBlacklistRecord> childPath, InverseForeignKey<O, ServerBlacklistRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServerBlacklistPath(Name alias, Table<ServerBlacklistRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServerBlacklistPath as(String alias) {
            return new ServerBlacklistPath(DSL.name(alias), this);
        }

        @Override
        public ServerBlacklistPath as(Name alias) {
            return new ServerBlacklistPath(alias, this);
        }

        @Override
        public ServerBlacklistPath as(Table<?> alias) {
            return new ServerBlacklistPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Atropos.ATROPOS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SERVER_BLACKLIST_SERVER_ID);
    }

    @Override
    public Identity<ServerBlacklistRecord, Integer> getIdentity() {
        return (Identity<ServerBlacklistRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServerBlacklistRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_BLACKLIST_PRIMARY;
    }

    @Override
    public List<ForeignKey<ServerBlacklistRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_BLACKLIST_IBFK_1);
    }

    private transient ServersPath _servers;

    /**
     * Get the implicit join path to the <code>atropos.servers</code> table.
     */
    public ServersPath servers() {
        if (_servers == null)
            _servers = new ServersPath(this, Keys.SERVER_BLACKLIST_IBFK_1, null);

        return _servers;
    }

    @Override
    public ServerBlacklist as(String alias) {
        return new ServerBlacklist(DSL.name(alias), this);
    }

    @Override
    public ServerBlacklist as(Name alias) {
        return new ServerBlacklist(alias, this);
    }

    @Override
    public ServerBlacklist as(Table<?> alias) {
        return new ServerBlacklist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerBlacklist rename(String name) {
        return new ServerBlacklist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerBlacklist rename(Name name) {
        return new ServerBlacklist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerBlacklist rename(Table<?> name) {
        return new ServerBlacklist(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerBlacklist where(Condition condition) {
        return new ServerBlacklist(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerBlacklist where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerBlacklist where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerBlacklist where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerBlacklist where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerBlacklist where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerBlacklist where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerBlacklist where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerBlacklist whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerBlacklist whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
