/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Atropos;
import dev.laarryy.atropos.jooq.Indexes;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.Servers.ServersPath;
import dev.laarryy.atropos.jooq.tables.Users.UsersPath;
import dev.laarryy.atropos.jooq.tables.records.PunishmentsRecord;
import dev.laarryy.atropos.utils.converters.ByteToBooleanConverter;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Punishments extends TableImpl<PunishmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>atropos.punishments</code>
     */
    public static final Punishments PUNISHMENTS = new Punishments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PunishmentsRecord> getRecordType() {
        return PunishmentsRecord.class;
    }

    /**
     * The column <code>atropos.punishments.id</code>.
     */
    public final TableField<PunishmentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>atropos.punishments.user_id_punished</code>.
     */
    public final TableField<PunishmentsRecord, Integer> USER_ID_PUNISHED = createField(DSL.name("user_id_punished"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.punishments.name_punished</code>.
     */
    public final TableField<PunishmentsRecord, String> NAME_PUNISHED = createField(DSL.name("name_punished"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>atropos.punishments.user_id_punisher</code>.
     */
    public final TableField<PunishmentsRecord, Integer> USER_ID_PUNISHER = createField(DSL.name("user_id_punisher"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.punishments.name_punisher</code>.
     */
    public final TableField<PunishmentsRecord, String> NAME_PUNISHER = createField(DSL.name("name_punisher"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>atropos.punishments.server_id</code>.
     */
    public final TableField<PunishmentsRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.punishments.punishment_type</code>.
     */
    public final TableField<PunishmentsRecord, String> PUNISHMENT_TYPE = createField(DSL.name("punishment_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>atropos.punishments.punishment_date</code>.
     */
    public final TableField<PunishmentsRecord, Instant> PUNISHMENT_DATE = createField(DSL.name("punishment_date"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INSTANT)), this, "");

    /**
     * The column <code>atropos.punishments.punishment_message</code>.
     */
    public final TableField<PunishmentsRecord, String> PUNISHMENT_MESSAGE = createField(DSL.name("punishment_message"), SQLDataType.VARCHAR(4000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>atropos.punishments.permanent</code>.
     */
    public final TableField<PunishmentsRecord, Boolean> PERMANENT = createField(DSL.name("permanent"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "", new ByteToBooleanConverter());

    /**
     * The column <code>atropos.punishments.automatic</code>.
     */
    public final TableField<PunishmentsRecord, Boolean> AUTOMATIC = createField(DSL.name("automatic"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "", new ByteToBooleanConverter());

    /**
     * The column <code>atropos.punishments.punishment_end_date</code>.
     */
    public final TableField<PunishmentsRecord, Instant> PUNISHMENT_END_DATE = createField(DSL.name("punishment_end_date"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "");

    /**
     * The column <code>atropos.punishments.punishment_end_reason</code>.
     */
    public final TableField<PunishmentsRecord, String> PUNISHMENT_END_REASON = createField(DSL.name("punishment_end_reason"), SQLDataType.VARCHAR(4000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>atropos.punishments.did_dm</code>.
     */
    public final TableField<PunishmentsRecord, Boolean> DID_DM = createField(DSL.name("did_dm"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "", new ByteToBooleanConverter());

    /**
     * The column <code>atropos.punishments.end_date_passed</code>.
     */
    public final TableField<PunishmentsRecord, Boolean> END_DATE_PASSED = createField(DSL.name("end_date_passed"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "", new ByteToBooleanConverter());

    /**
     * The column <code>atropos.punishments.punishment_ender</code>.
     */
    public final TableField<PunishmentsRecord, Integer> PUNISHMENT_ENDER = createField(DSL.name("punishment_ender"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.punishments.name_punishment_ender</code>.
     */
    public final TableField<PunishmentsRecord, String> NAME_PUNISHMENT_ENDER = createField(DSL.name("name_punishment_ender"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>atropos.punishments.automatic_end</code>.
     */
    public final TableField<PunishmentsRecord, Boolean> AUTOMATIC_END = createField(DSL.name("automatic_end"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "", new ByteToBooleanConverter());

    /**
     * The column <code>atropos.punishments.batch_id</code>.
     */
    public final TableField<PunishmentsRecord, Integer> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private Punishments(Name alias, Table<PunishmentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Punishments(Name alias, Table<PunishmentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>atropos.punishments</code> table reference
     */
    public Punishments(String alias) {
        this(DSL.name(alias), PUNISHMENTS);
    }

    /**
     * Create an aliased <code>atropos.punishments</code> table reference
     */
    public Punishments(Name alias) {
        this(alias, PUNISHMENTS);
    }

    /**
     * Create a <code>atropos.punishments</code> table reference
     */
    public Punishments() {
        this(DSL.name("punishments"), null);
    }

    public <O extends Record> Punishments(Table<O> path, ForeignKey<O, PunishmentsRecord> childPath, InverseForeignKey<O, PunishmentsRecord> parentPath) {
        super(path, childPath, parentPath, PUNISHMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PunishmentsPath extends Punishments implements Path<PunishmentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PunishmentsPath(Table<O> path, ForeignKey<O, PunishmentsRecord> childPath, InverseForeignKey<O, PunishmentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PunishmentsPath(Name alias, Table<PunishmentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PunishmentsPath as(String alias) {
            return new PunishmentsPath(DSL.name(alias), this);
        }

        @Override
        public PunishmentsPath as(Name alias) {
            return new PunishmentsPath(alias, this);
        }

        @Override
        public PunishmentsPath as(Table<?> alias) {
            return new PunishmentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Atropos.ATROPOS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PUNISHMENTS_SERVER_ID, Indexes.PUNISHMENTS_USER_ID);
    }

    @Override
    public Identity<PunishmentsRecord, Integer> getIdentity() {
        return (Identity<PunishmentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PunishmentsRecord> getPrimaryKey() {
        return Keys.KEY_PUNISHMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PunishmentsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PUNISHMENTS_ID);
    }

    @Override
    public List<ForeignKey<PunishmentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PUNISHMENTS_IBFK_1, Keys.PUNISHMENTS_IBFK_2, Keys.PUNISHMENTS_USERS_ID_FK);
    }

    private transient UsersPath _punishmentsIbfk_1;

    /**
     * Get the implicit join path to the <code>atropos.users</code> table, via
     * the <code>punishments_ibfk_1</code> key.
     */
    public UsersPath punishmentsIbfk_1() {
        if (_punishmentsIbfk_1 == null)
            _punishmentsIbfk_1 = new UsersPath(this, Keys.PUNISHMENTS_IBFK_1, null);

        return _punishmentsIbfk_1;
    }

    private transient ServersPath _servers;

    /**
     * Get the implicit join path to the <code>atropos.servers</code> table.
     */
    public ServersPath servers() {
        if (_servers == null)
            _servers = new ServersPath(this, Keys.PUNISHMENTS_IBFK_2, null);

        return _servers;
    }

    private transient UsersPath _punishmentsUsersIdFk;

    /**
     * Get the implicit join path to the <code>atropos.users</code> table, via
     * the <code>punishments_users_id_fk</code> key.
     */
    public UsersPath punishmentsUsersIdFk() {
        if (_punishmentsUsersIdFk == null)
            _punishmentsUsersIdFk = new UsersPath(this, Keys.PUNISHMENTS_USERS_ID_FK, null);

        return _punishmentsUsersIdFk;
    }

    @Override
    public Punishments as(String alias) {
        return new Punishments(DSL.name(alias), this);
    }

    @Override
    public Punishments as(Name alias) {
        return new Punishments(alias, this);
    }

    @Override
    public Punishments as(Table<?> alias) {
        return new Punishments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Punishments rename(String name) {
        return new Punishments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Punishments rename(Name name) {
        return new Punishments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Punishments rename(Table<?> name) {
        return new Punishments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Punishments where(Condition condition) {
        return new Punishments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Punishments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Punishments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Punishments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Punishments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Punishments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Punishments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Punishments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Punishments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Punishments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
