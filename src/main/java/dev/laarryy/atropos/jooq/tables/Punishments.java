/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Converters;
import dev.laarryy.atropos.jooq.Indexes;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.PunishmentsRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function22;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Punishments extends TableImpl<PunishmentsRecord> {

    private static final long serialVersionUID = 1L;

    public static final Punishments PUNISHMENTS = new Punishments();

    @Override
    @NonNull
    public Class<PunishmentsRecord> getRecordType() {
        return PunishmentsRecord.class;
    }

    public final TableField<PunishmentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<PunishmentsRecord, Integer> USER_ID_PUNISHED = createField(DSL.name("user_id_punished"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    public final TableField<PunishmentsRecord, String> NAME_PUNISHED = createField(DSL.name("name_punished"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, String> DISCRIM_PUNISHED = createField(DSL.name("discrim_punished"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, Integer> USER_ID_PUNISHER = createField(DSL.name("user_id_punisher"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    public final TableField<PunishmentsRecord, String> NAME_PUNISHER = createField(DSL.name("name_punisher"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, String> DISCRIM_PUNISHER = createField(DSL.name("discrim_punisher"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    public final TableField<PunishmentsRecord, String> PUNISHMENT_TYPE = createField(DSL.name("punishment_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    public final TableField<PunishmentsRecord, Instant> PUNISHMENT_DATE = createField(DSL.name("punishment_date"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)).asConvertedDataType(Converters.INSTANT), this, "");

    public final TableField<PunishmentsRecord, String> PUNISHMENT_MESSAGE = createField(DSL.name("punishment_message"), SQLDataType.VARCHAR(4000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, Boolean> PERMANENT = createField(DSL.name("permanent"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<PunishmentsRecord, Boolean> AUTOMATIC = createField(DSL.name("automatic"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<PunishmentsRecord, Instant> PUNISHMENT_END_DATE = createField(DSL.name("punishment_end_date"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.INSTANT), this, "");

    public final TableField<PunishmentsRecord, String> PUNISHMENT_END_REASON = createField(DSL.name("punishment_end_reason"), SQLDataType.VARCHAR(4000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, Boolean> DID_DM = createField(DSL.name("did_dm"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<PunishmentsRecord, Boolean> END_DATE_PASSED = createField(DSL.name("end_date_passed"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<PunishmentsRecord, Integer> PUNISHMENT_ENDER = createField(DSL.name("punishment_ender"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    public final TableField<PunishmentsRecord, String> NAME_PUNISHMENT_ENDER = createField(DSL.name("name_punishment_ender"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, String> DISCRIM_PUNISHMENT_ENDER = createField(DSL.name("discrim_punishment_ender"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<PunishmentsRecord, Boolean> AUTOMATIC_END = createField(DSL.name("automatic_end"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<PunishmentsRecord, Integer> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    private Punishments(Name alias, Table<PunishmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Punishments(Name alias, Table<PunishmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public Punishments(String alias) {
        this(DSL.name(alias), PUNISHMENTS);
    }

    public Punishments(Name alias) {
        this(alias, PUNISHMENTS);
    }

    public Punishments() {
        this(DSL.name("punishments"), null);
    }

    public <O extends Record> Punishments(Table<O> child, ForeignKey<O, PunishmentsRecord> key) {
        super(child, key, PUNISHMENTS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return null;
    }

    @Override
    @NonNull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PUNISHMENTS_SERVER_ID, Indexes.PUNISHMENTS_USER_ID);
    }

    @Override
    @NonNull
    public Identity<PunishmentsRecord, Integer> getIdentity() {
        return (Identity<PunishmentsRecord, Integer>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<PunishmentsRecord> getPrimaryKey() {
        return Keys.KEY_PUNISHMENTS_PRIMARY;
    }

    @Override
    @NonNull
    public List<UniqueKey<PunishmentsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PUNISHMENTS_ID);
    }

    @Override
    @NonNull
    public List<ForeignKey<PunishmentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PUNISHMENTS_IBFK_1, Keys.PUNISHMENTS_USERS_ID_FK, Keys.PUNISHMENTS_IBFK_2);
    }

    private transient Users _punishmentsIbfk_1;
    private transient Users _punishmentsUsersIdFk;
    private transient Servers _servers;

    public Users punishmentsIbfk_1() {
        if (_punishmentsIbfk_1 == null)
            _punishmentsIbfk_1 = new Users(this, Keys.PUNISHMENTS_IBFK_1);

        return _punishmentsIbfk_1;
    }

    public Users punishmentsUsersIdFk() {
        if (_punishmentsUsersIdFk == null)
            _punishmentsUsersIdFk = new Users(this, Keys.PUNISHMENTS_USERS_ID_FK);

        return _punishmentsUsersIdFk;
    }

    public Servers servers() {
        if (_servers == null)
            _servers = new Servers(this, Keys.PUNISHMENTS_IBFK_2);

        return _servers;
    }

    @Override
    @NonNull
    public Punishments as(String alias) {
        return new Punishments(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public Punishments as(Name alias) {
        return new Punishments(alias, this);
    }

    @Override
    @NonNull
    public Punishments as(Table<?> alias) {
        return new Punishments(alias.getQualifiedName(), this);
    }

    @Override
    @NonNull
    public Punishments rename(String name) {
        return new Punishments(DSL.name(name), null);
    }

    @Override
    @NonNull
    public Punishments rename(Name name) {
        return new Punishments(name, null);
    }

    @Override
    @NonNull
    public Punishments rename(Table<?> name) {
        return new Punishments(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row22<Integer, Integer, String, String, Integer, String, String, Integer, String, Instant, String, Boolean, Boolean, Instant, String, Boolean, Boolean, Integer, String, String, Boolean, Integer> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function22<? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super Instant, ? super String, ? super Boolean, ? super Boolean, ? super Instant, ? super String, ? super Boolean, ? super Boolean, ? super Integer, ? super String, ? super String, ? super Boolean, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function22<? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super Instant, ? super String, ? super Boolean, ? super Boolean, ? super Instant, ? super String, ? super Boolean, ? super Boolean, ? super Integer, ? super String, ? super String, ? super Boolean, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
