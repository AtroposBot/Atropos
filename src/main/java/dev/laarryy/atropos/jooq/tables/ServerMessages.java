/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Converters;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.ServerMessagesRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import discord4j.common.util.Snowflake;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerMessages extends TableImpl<ServerMessagesRecord> {

    private static final long serialVersionUID = 1L;

    public static final ServerMessages SERVER_MESSAGES = new ServerMessages();

    @Override
    @NonNull
    public Class<ServerMessagesRecord> getRecordType() {
        return ServerMessagesRecord.class;
    }

    public final TableField<ServerMessagesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<ServerMessagesRecord, Snowflake> MESSAGE_ID_SNOWFLAKE = createField(DSL.name("message_id_snowflake"), SQLDataType.BIGINT.nullable(false).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerMessagesRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    public final TableField<ServerMessagesRecord, Snowflake> SERVER_ID_SNOWFLAKE = createField(DSL.name("server_id_snowflake"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerMessagesRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    public final TableField<ServerMessagesRecord, Snowflake> USER_ID_SNOWFLAKE = createField(DSL.name("user_id_snowflake"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerMessagesRecord, Instant> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)).asConvertedDataType(Converters.INSTANT), this, "");

    public final TableField<ServerMessagesRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(4000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    public final TableField<ServerMessagesRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<ServerMessagesRecord, String> MESSAGE_DATA = createField(DSL.name("message_data"), SQLDataType.VARCHAR(4000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private ServerMessages(Name alias, Table<ServerMessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerMessages(Name alias, Table<ServerMessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public ServerMessages(String alias) {
        this(DSL.name(alias), SERVER_MESSAGES);
    }

    public ServerMessages(Name alias) {
        this(alias, SERVER_MESSAGES);
    }

    public ServerMessages() {
        this(DSL.name("server_messages"), null);
    }

    public <O extends Record> ServerMessages(Table<O> child, ForeignKey<O, ServerMessagesRecord> key) {
        super(child, key, SERVER_MESSAGES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return null;
    }

    @Override
    @NonNull
    public Identity<ServerMessagesRecord, Integer> getIdentity() {
        return (Identity<ServerMessagesRecord, Integer>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<ServerMessagesRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_MESSAGES_PRIMARY;
    }

    @Override
    @NonNull
    public List<UniqueKey<ServerMessagesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SERVER_MESSAGES_SERVER_MESSAGES_ID_UINDEX);
    }

    @Override
    @NonNull
    public List<ForeignKey<ServerMessagesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_MESSAGES_SERVERS_ID_FK, Keys.SERVER_MESSAGES_USERS_ID_FK);
    }

    private transient Servers _servers;
    private transient Users _users;

    public Servers servers() {
        if (_servers == null)
            _servers = new Servers(this, Keys.SERVER_MESSAGES_SERVERS_ID_FK);

        return _servers;
    }

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.SERVER_MESSAGES_USERS_ID_FK);

        return _users;
    }

    @Override
    @NonNull
    public ServerMessages as(String alias) {
        return new ServerMessages(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public ServerMessages as(Name alias) {
        return new ServerMessages(alias, this);
    }

    @Override
    @NonNull
    public ServerMessages as(Table<?> alias) {
        return new ServerMessages(alias.getQualifiedName(), this);
    }

    @Override
    @NonNull
    public ServerMessages rename(String name) {
        return new ServerMessages(DSL.name(name), null);
    }

    @Override
    @NonNull
    public ServerMessages rename(Name name) {
        return new ServerMessages(name, null);
    }

    @Override
    @NonNull
    public ServerMessages rename(Table<?> name) {
        return new ServerMessages(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row10<Integer, Snowflake, Integer, Snowflake, Integer, Snowflake, Instant, String, Boolean, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function10<? super Integer, ? super Snowflake, ? super Integer, ? super Snowflake, ? super Integer, ? super Snowflake, ? super Instant, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super Snowflake, ? super Integer, ? super Snowflake, ? super Integer, ? super Snowflake, ? super Instant, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
