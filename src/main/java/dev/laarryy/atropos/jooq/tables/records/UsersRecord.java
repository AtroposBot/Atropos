/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables.records;


import dev.laarryy.atropos.jooq.tables.Users;

import org.checkerframework.checker.nullness.qual.NonNull;
import discord4j.common.util.Snowflake;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.Instant;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record3<Integer, Snowflake, Instant> {

    private static final long serialVersionUID = 1L;

    public UsersRecord setId(@NonNull Integer value) {
        set(0, value);
        return this;
    }

    @NonNull
    public Integer getId() {
        return (Integer) get(0);
    }

    public UsersRecord setUserIdSnowflake(@NonNull Snowflake value) {
        set(1, value);
        return this;
    }

    @NonNull
    public Snowflake getUserIdSnowflake() {
        return (Snowflake) get(1);
    }

    public UsersRecord setDate(@NonNull Instant value) {
        set(2, value);
        return this;
    }

    @NonNull
    public Instant getDate() {
        return (Instant) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row3<Integer, Snowflake, Instant> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NonNull
    public Row3<Integer, Snowflake, Instant> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NonNull
    public Field<Integer> field1() {
        return Users.USERS.ID;
    }

    @Override
    @NonNull
    public Field<Snowflake> field2() {
        return Users.USERS.USER_ID_SNOWFLAKE;
    }

    @Override
    @NonNull
    public Field<Instant> field3() {
        return Users.USERS.DATE;
    }

    @Override
    @NonNull
    public Integer component1() {
        return getId();
    }

    @Override
    @NonNull
    public Snowflake component2() {
        return getUserIdSnowflake();
    }

    @Override
    @NonNull
    public Instant component3() {
        return getDate();
    }

    @Override
    @NonNull
    public Integer value1() {
        return getId();
    }

    @Override
    @NonNull
    public Snowflake value2() {
        return getUserIdSnowflake();
    }

    @Override
    @NonNull
    public Instant value3() {
        return getDate();
    }

    @Override
    @NonNull
    public UsersRecord value1(@NonNull Integer value) {
        setId(value);
        return this;
    }

    @Override
    @NonNull
    public UsersRecord value2(@NonNull Snowflake value) {
        setUserIdSnowflake(value);
        return this;
    }

    @Override
    @NonNull
    public UsersRecord value3(@NonNull Instant value) {
        setDate(value);
        return this;
    }

    @Override
    @NonNull
    public UsersRecord values(@NonNull Integer value1, @NonNull Snowflake value2, @NonNull Instant value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    public UsersRecord() {
        super(Users.USERS);
    }

    public UsersRecord(@NonNull Integer id, @NonNull Snowflake userIdSnowflake, @NonNull Instant date) {
        super(Users.USERS);

        setId(id);
        setUserIdSnowflake(userIdSnowflake);
        setDate(date);
    }
}
