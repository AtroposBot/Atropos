/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Atropos;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.Punishments.PunishmentsPath;
import dev.laarryy.atropos.jooq.tables.ServerBlacklist.ServerBlacklistPath;
import dev.laarryy.atropos.jooq.tables.ServerCommandUses.ServerCommandUsesPath;
import dev.laarryy.atropos.jooq.tables.ServerMessages.ServerMessagesPath;
import dev.laarryy.atropos.jooq.tables.ServerProperties.ServerPropertiesPath;
import dev.laarryy.atropos.jooq.tables.ServerRolePermissions.ServerRolePermissionsPath;
import dev.laarryy.atropos.jooq.tables.ServerUser.ServerUserPath;
import dev.laarryy.atropos.jooq.tables.records.ServersRecord;
import dev.laarryy.atropos.utils.converters.LongToSnowflakeConverter;
import discord4j.common.util.Snowflake;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Servers extends TableImpl<ServersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>atropos.servers</code>
     */
    public static final Servers SERVERS = new Servers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServersRecord> getRecordType() {
        return ServersRecord.class;
    }

    /**
     * The column <code>atropos.servers.id</code>.
     */
    public final TableField<ServersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>atropos.servers.date</code>.
     */
    public final TableField<ServersRecord, Instant> DATE = createField(DSL.name("date"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INSTANT)), this, "");

    /**
     * The column <code>atropos.servers.server_id_snowflake</code>.
     */
    public final TableField<ServersRecord, Snowflake> SERVER_ID_SNOWFLAKE = createField(DSL.name("server_id_snowflake"), SQLDataType.BIGINT.nullable(false), this, "", new LongToSnowflakeConverter());

    private Servers(Name alias, Table<ServersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Servers(Name alias, Table<ServersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>atropos.servers</code> table reference
     */
    public Servers(String alias) {
        this(DSL.name(alias), SERVERS);
    }

    /**
     * Create an aliased <code>atropos.servers</code> table reference
     */
    public Servers(Name alias) {
        this(alias, SERVERS);
    }

    /**
     * Create a <code>atropos.servers</code> table reference
     */
    public Servers() {
        this(DSL.name("servers"), null);
    }

    public <O extends Record> Servers(Table<O> path, ForeignKey<O, ServersRecord> childPath, InverseForeignKey<O, ServersRecord> parentPath) {
        super(path, childPath, parentPath, SERVERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServersPath extends Servers implements Path<ServersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServersPath(Table<O> path, ForeignKey<O, ServersRecord> childPath, InverseForeignKey<O, ServersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServersPath(Name alias, Table<ServersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServersPath as(String alias) {
            return new ServersPath(DSL.name(alias), this);
        }

        @Override
        public ServersPath as(Name alias) {
            return new ServersPath(alias, this);
        }

        @Override
        public ServersPath as(Table<?> alias) {
            return new ServersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Atropos.ATROPOS;
    }

    @Override
    public Identity<ServersRecord, Integer> getIdentity() {
        return (Identity<ServersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServersRecord> getPrimaryKey() {
        return Keys.KEY_SERVERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ServersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SERVERS_SERVERS_SERVER_ID_UINDEX);
    }

    private transient PunishmentsPath _punishments;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.punishments</code> table
     */
    public PunishmentsPath punishments() {
        if (_punishments == null)
            _punishments = new PunishmentsPath(this, null, Keys.PUNISHMENTS_IBFK_2.getInverseKey());

        return _punishments;
    }

    private transient ServerBlacklistPath _serverBlacklist;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_blacklist</code> table
     */
    public ServerBlacklistPath serverBlacklist() {
        if (_serverBlacklist == null)
            _serverBlacklist = new ServerBlacklistPath(this, null, Keys.SERVER_BLACKLIST_IBFK_1.getInverseKey());

        return _serverBlacklist;
    }

    private transient ServerCommandUsesPath _serverCommandUses;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_command_uses</code> table
     */
    public ServerCommandUsesPath serverCommandUses() {
        if (_serverCommandUses == null)
            _serverCommandUses = new ServerCommandUsesPath(this, null, Keys.SERVER_COMMAND_USES_SERVERS_ID_FK.getInverseKey());

        return _serverCommandUses;
    }

    private transient ServerMessagesPath _serverMessages;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_messages</code> table
     */
    public ServerMessagesPath serverMessages() {
        if (_serverMessages == null)
            _serverMessages = new ServerMessagesPath(this, null, Keys.SERVER_MESSAGES_SERVERS_ID_FK.getInverseKey());

        return _serverMessages;
    }

    private transient ServerPropertiesPath _serverProperties;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_properties</code> table
     */
    public ServerPropertiesPath serverProperties() {
        if (_serverProperties == null)
            _serverProperties = new ServerPropertiesPath(this, null, Keys.SERVER_PROPERTIES_SERVERS_ID_FK.getInverseKey());

        return _serverProperties;
    }

    private transient ServerRolePermissionsPath _serverRolePermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_role_permissions</code> table
     */
    public ServerRolePermissionsPath serverRolePermissions() {
        if (_serverRolePermissions == null)
            _serverRolePermissions = new ServerRolePermissionsPath(this, null, Keys.SERVER_ROLE_PERMISSIONS_IBFK_1.getInverseKey());

        return _serverRolePermissions;
    }

    private transient ServerUserPath _serverUser;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_user</code> table
     */
    public ServerUserPath serverUser() {
        if (_serverUser == null)
            _serverUser = new ServerUserPath(this, null, Keys.SERVER_USER_IBFK_2.getInverseKey());

        return _serverUser;
    }

    @Override
    public Servers as(String alias) {
        return new Servers(DSL.name(alias), this);
    }

    @Override
    public Servers as(Name alias) {
        return new Servers(alias, this);
    }

    @Override
    public Servers as(Table<?> alias) {
        return new Servers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Servers rename(String name) {
        return new Servers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Servers rename(Name name) {
        return new Servers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Servers rename(Table<?> name) {
        return new Servers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Servers where(Condition condition) {
        return new Servers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Servers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Servers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Servers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Servers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Servers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Servers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Servers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Servers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Servers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
