/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Converters;
import dev.laarryy.atropos.jooq.Indexes;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.ServerPropertiesRecord;

import java.util.Arrays;
import java.util.List;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import discord4j.common.util.Snowflake;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function18;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerProperties extends TableImpl<ServerPropertiesRecord> {

    private static final long serialVersionUID = 1L;

    public static final ServerProperties SERVER_PROPERTIES = new ServerProperties();

    @Override
    @NonNull
    public Class<ServerPropertiesRecord> getRecordType() {
        return ServerPropertiesRecord.class;
    }

    public final TableField<ServerPropertiesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<ServerPropertiesRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<ServerPropertiesRecord, Snowflake> SERVER_ID_SNOWFLAKE = createField(DSL.name("server_id_snowflake"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerPropertiesRecord, String> SERVER_NAME = createField(DSL.name("server_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("'default_server_name'", SQLDataType.VARCHAR)), this, "");

    public final TableField<ServerPropertiesRecord, Long> MEMBER_COUNT_ON_BOT_JOIN = createField(DSL.name("member_count_on_bot_join"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    public final TableField<ServerPropertiesRecord, Snowflake> MUTED_ROLE_ID_SNOWFLAKE = createField(DSL.name("muted_role_id_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerPropertiesRecord, Snowflake> MEMBER_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("member_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerPropertiesRecord, Snowflake> MESSAGE_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("message_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerPropertiesRecord, Snowflake> GUILD_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("guild_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerPropertiesRecord, Snowflake> PUNISHMENT_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("punishment_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerPropertiesRecord, Boolean> STOP_JOINS = createField(DSL.name("stop_joins"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<ServerPropertiesRecord, Snowflake> MODMAIL_CHANNEL_SNOWFLAKE = createField(DSL.name("modmail_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    public final TableField<ServerPropertiesRecord, Integer> MESSAGES_TO_WARN = createField(DSL.name("messages_to_warn"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("7", SQLDataType.INTEGER)), this, "");

    public final TableField<ServerPropertiesRecord, Integer> WARNS_TO_MUTE = createField(DSL.name("warns_to_mute"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("3", SQLDataType.INTEGER)), this, "");

    public final TableField<ServerPropertiesRecord, Integer> PINGS_TO_WARN = createField(DSL.name("pings_to_warn"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("5", SQLDataType.INTEGER)), this, "");

    public final TableField<ServerPropertiesRecord, Integer> JOINS_TO_ANTIRAID = createField(DSL.name("joins_to_antiraid"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    public final TableField<ServerPropertiesRecord, Boolean> ANTI_SCAM = createField(DSL.name("anti_scam"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    public final TableField<ServerPropertiesRecord, Boolean> DEHOIST = createField(DSL.name("dehoist"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    private ServerProperties(Name alias, Table<ServerPropertiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerProperties(Name alias, Table<ServerPropertiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public ServerProperties(String alias) {
        this(DSL.name(alias), SERVER_PROPERTIES);
    }

    public ServerProperties(Name alias) {
        this(alias, SERVER_PROPERTIES);
    }

    public ServerProperties() {
        this(DSL.name("server_properties"), null);
    }

    public <O extends Record> ServerProperties(Table<O> child, ForeignKey<O, ServerPropertiesRecord> key) {
        super(child, key, SERVER_PROPERTIES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return null;
    }

    @Override
    @NonNull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SERVER_PROPERTIES_SERVER_PROPERTIES_SERVERS_SERVER_ID_FK);
    }

    @Override
    @NonNull
    public Identity<ServerPropertiesRecord, Integer> getIdentity() {
        return (Identity<ServerPropertiesRecord, Integer>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<ServerPropertiesRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_PROPERTIES_PRIMARY;
    }

    @Override
    @NonNull
    public List<UniqueKey<ServerPropertiesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SERVER_PROPERTIES_ID);
    }

    @Override
    @NonNull
    public List<ForeignKey<ServerPropertiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_PROPERTIES_SERVERS_ID_FK);
    }

    private transient Servers _servers;

    public Servers servers() {
        if (_servers == null)
            _servers = new Servers(this, Keys.SERVER_PROPERTIES_SERVERS_ID_FK);

        return _servers;
    }

    @Override
    @NonNull
    public ServerProperties as(String alias) {
        return new ServerProperties(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public ServerProperties as(Name alias) {
        return new ServerProperties(alias, this);
    }

    @Override
    @NonNull
    public ServerProperties as(Table<?> alias) {
        return new ServerProperties(alias.getQualifiedName(), this);
    }

    @Override
    @NonNull
    public ServerProperties rename(String name) {
        return new ServerProperties(DSL.name(name), null);
    }

    @Override
    @NonNull
    public ServerProperties rename(Name name) {
        return new ServerProperties(name, null);
    }

    @Override
    @NonNull
    public ServerProperties rename(Table<?> name) {
        return new ServerProperties(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row18<Integer, Integer, Snowflake, String, Long, Snowflake, Snowflake, Snowflake, Snowflake, Snowflake, Boolean, Snowflake, Integer, Integer, Integer, Integer, Boolean, Boolean> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function18<? super Integer, ? super Integer, ? super Snowflake, ? super String, ? super Long, ? super Snowflake, ? super Snowflake, ? super Snowflake, ? super Snowflake, ? super Snowflake, ? super Boolean, ? super Snowflake, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super Integer, ? super Integer, ? super Snowflake, ? super String, ? super Long, ? super Snowflake, ? super Snowflake, ? super Snowflake, ? super Snowflake, ? super Snowflake, ? super Boolean, ? super Snowflake, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
