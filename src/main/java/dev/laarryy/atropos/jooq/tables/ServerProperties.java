/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Atropos;
import dev.laarryy.atropos.jooq.Indexes;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.ServerPropertiesRecord;
import dev.laarryy.atropos.utils.converters.SnowflakeToLongConverter;
import jooq.tables.Servers.ServersPath;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerProperties extends TableImpl<ServerPropertiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>atropos.server_properties</code>
     */
    public static final ServerProperties SERVER_PROPERTIES = new ServerProperties();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerPropertiesRecord> getRecordType() {
        return ServerPropertiesRecord.class;
    }

    /**
     * The column <code>atropos.server_properties.id</code>.
     */
    public final TableField<ServerPropertiesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>atropos.server_properties.server_id</code>.
     */
    public final TableField<ServerPropertiesRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>atropos.server_properties.server_id_snowflake</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> SERVER_ID_SNOWFLAKE = createField(DSL.name("server_id_snowflake"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "", new SnowflakeToLongConverter());

    /**
     * The column <code>atropos.server_properties.server_name</code>.
     */
    public final TableField<ServerPropertiesRecord, String> SERVER_NAME = createField(DSL.name("server_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("'default_server_name'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>atropos.server_properties.member_count_on_bot_join</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> MEMBER_COUNT_ON_BOT_JOIN = createField(DSL.name("member_count_on_bot_join"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>atropos.server_properties.muted_role_id_snowflake</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> MUTED_ROLE_ID_SNOWFLAKE = createField(DSL.name("muted_role_id_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "", new SnowflakeToLongConverter());

    /**
     * The column
     * <code>atropos.server_properties.member_log_channel_snowflake</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> MEMBER_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("member_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "", new SnowflakeToLongConverter());

    /**
     * The column
     * <code>atropos.server_properties.message_log_channel_snowflake</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> MESSAGE_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("message_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "", new SnowflakeToLongConverter());

    /**
     * The column
     * <code>atropos.server_properties.guild_log_channel_snowflake</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> GUILD_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("guild_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "", new SnowflakeToLongConverter());

    /**
     * The column
     * <code>atropos.server_properties.punishment_log_channel_snowflake</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> PUNISHMENT_LOG_CHANNEL_SNOWFLAKE = createField(DSL.name("punishment_log_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "", new SnowflakeToLongConverter());

    /**
     * The column <code>atropos.server_properties.stop_joins</code>.
     */
    public final TableField<ServerPropertiesRecord, Boolean> STOP_JOINS = createField(DSL.name("stop_joins"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>atropos.server_properties.modmail_channel_snowflake</code>.
     */
    public final TableField<ServerPropertiesRecord, Long> MODMAIL_CHANNEL_SNOWFLAKE = createField(DSL.name("modmail_channel_snowflake"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "", new SnowflakeToLongConverter());

    /**
     * The column <code>atropos.server_properties.messages_to_warn</code>.
     */
    public final TableField<ServerPropertiesRecord, Integer> MESSAGES_TO_WARN = createField(DSL.name("messages_to_warn"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("7"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.server_properties.warns_to_mute</code>.
     */
    public final TableField<ServerPropertiesRecord, Integer> WARNS_TO_MUTE = createField(DSL.name("warns_to_mute"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("3"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.server_properties.pings_to_warn</code>.
     */
    public final TableField<ServerPropertiesRecord, Integer> PINGS_TO_WARN = createField(DSL.name("pings_to_warn"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("5"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.server_properties.joins_to_antiraid</code>.
     */
    public final TableField<ServerPropertiesRecord, Integer> JOINS_TO_ANTIRAID = createField(DSL.name("joins_to_antiraid"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>atropos.server_properties.anti_scam</code>.
     */
    public final TableField<ServerPropertiesRecord, Boolean> ANTI_SCAM = createField(DSL.name("anti_scam"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>atropos.server_properties.dehoist</code>.
     */
    public final TableField<ServerPropertiesRecord, Boolean> DEHOIST = createField(DSL.name("dehoist"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.BOOLEAN)), this, "");

    private ServerProperties(Name alias, Table<ServerPropertiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServerProperties(Name alias, Table<ServerPropertiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>atropos.server_properties</code> table reference
     */
    public ServerProperties(String alias) {
        this(DSL.name(alias), SERVER_PROPERTIES);
    }

    /**
     * Create an aliased <code>atropos.server_properties</code> table reference
     */
    public ServerProperties(Name alias) {
        this(alias, SERVER_PROPERTIES);
    }

    /**
     * Create a <code>atropos.server_properties</code> table reference
     */
    public ServerProperties() {
        this(DSL.name("server_properties"), null);
    }

    public <O extends Record> ServerProperties(Table<O> path, ForeignKey<O, ServerPropertiesRecord> childPath, InverseForeignKey<O, ServerPropertiesRecord> parentPath) {
        super(path, childPath, parentPath, SERVER_PROPERTIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServerPropertiesPath extends ServerProperties implements Path<ServerPropertiesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServerPropertiesPath(Table<O> path, ForeignKey<O, ServerPropertiesRecord> childPath, InverseForeignKey<O, ServerPropertiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServerPropertiesPath(Name alias, Table<ServerPropertiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServerPropertiesPath as(String alias) {
            return new ServerPropertiesPath(DSL.name(alias), this);
        }

        @Override
        public ServerPropertiesPath as(Name alias) {
            return new ServerPropertiesPath(alias, this);
        }

        @Override
        public ServerPropertiesPath as(Table<?> alias) {
            return new ServerPropertiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Atropos.ATROPOS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SERVER_PROPERTIES_SERVER_PROPERTIES_SERVERS_SERVER_ID_FK);
    }

    @Override
    public Identity<ServerPropertiesRecord, Integer> getIdentity() {
        return (Identity<ServerPropertiesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServerPropertiesRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_PROPERTIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ServerPropertiesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SERVER_PROPERTIES_ID);
    }

    @Override
    public List<ForeignKey<ServerPropertiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_PROPERTIES_SERVERS_ID_FK);
    }

    private transient ServersPath _servers;

    /**
     * Get the implicit join path to the <code>atropos.servers</code> table.
     */
    public ServersPath servers() {
        if (_servers == null)
            _servers = new ServersPath(this, Keys.SERVER_PROPERTIES_SERVERS_ID_FK, null);

        return _servers;
    }

    @Override
    public ServerProperties as(String alias) {
        return new ServerProperties(DSL.name(alias), this);
    }

    @Override
    public ServerProperties as(Name alias) {
        return new ServerProperties(alias, this);
    }

    @Override
    public ServerProperties as(Table<?> alias) {
        return new ServerProperties(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerProperties rename(String name) {
        return new ServerProperties(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerProperties rename(Name name) {
        return new ServerProperties(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerProperties rename(Table<?> name) {
        return new ServerProperties(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerProperties where(Condition condition) {
        return new ServerProperties(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerProperties where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerProperties where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerProperties where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerProperties where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerProperties where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerProperties where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerProperties where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerProperties whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerProperties whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
