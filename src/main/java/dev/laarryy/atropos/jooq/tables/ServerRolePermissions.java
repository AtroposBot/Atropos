/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Converters;
import dev.laarryy.atropos.jooq.Indexes;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.ServerRolePermissionsRecord;

import java.util.Arrays;
import java.util.List;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import discord4j.common.util.Snowflake;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerRolePermissions extends TableImpl<ServerRolePermissionsRecord> {

    private static final long serialVersionUID = 1L;

    public static final ServerRolePermissions SERVER_ROLE_PERMISSIONS = new ServerRolePermissions();

    @Override
    @NonNull
    public Class<ServerRolePermissionsRecord> getRecordType() {
        return ServerRolePermissionsRecord.class;
    }

    public final TableField<ServerRolePermissionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<ServerRolePermissionsRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<ServerRolePermissionsRecord, Integer> PERMISSION_ID = createField(DSL.name("permission_id"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<ServerRolePermissionsRecord, Snowflake> ROLE_ID_SNOWFLAKE = createField(DSL.name("role_id_snowflake"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)).asConvertedDataType(Converters.SNOWFLAKE), this, "");

    private ServerRolePermissions(Name alias, Table<ServerRolePermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerRolePermissions(Name alias, Table<ServerRolePermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public ServerRolePermissions(String alias) {
        this(DSL.name(alias), SERVER_ROLE_PERMISSIONS);
    }

    public ServerRolePermissions(Name alias) {
        this(alias, SERVER_ROLE_PERMISSIONS);
    }

    public ServerRolePermissions() {
        this(DSL.name("server_role_permissions"), null);
    }

    public <O extends Record> ServerRolePermissions(Table<O> child, ForeignKey<O, ServerRolePermissionsRecord> key) {
        super(child, key, SERVER_ROLE_PERMISSIONS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return null;
    }

    @Override
    @NonNull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SERVER_ROLE_PERMISSIONS_PERMISSION_ID, Indexes.SERVER_ROLE_PERMISSIONS_SERVER_ID);
    }

    @Override
    @NonNull
    public Identity<ServerRolePermissionsRecord, Integer> getIdentity() {
        return (Identity<ServerRolePermissionsRecord, Integer>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<ServerRolePermissionsRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_ROLE_PERMISSIONS_PRIMARY;
    }

    @Override
    @NonNull
    public List<ForeignKey<ServerRolePermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_ROLE_PERMISSIONS_IBFK_1, Keys.SERVER_ROLE_PERMISSIONS_IBFK_2);
    }

    private transient Servers _servers;
    private transient Permissions _permissions;

    public Servers servers() {
        if (_servers == null)
            _servers = new Servers(this, Keys.SERVER_ROLE_PERMISSIONS_IBFK_1);

        return _servers;
    }

    public Permissions permissions() {
        if (_permissions == null)
            _permissions = new Permissions(this, Keys.SERVER_ROLE_PERMISSIONS_IBFK_2);

        return _permissions;
    }

    @Override
    @NonNull
    public ServerRolePermissions as(String alias) {
        return new ServerRolePermissions(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public ServerRolePermissions as(Name alias) {
        return new ServerRolePermissions(alias, this);
    }

    @Override
    @NonNull
    public ServerRolePermissions as(Table<?> alias) {
        return new ServerRolePermissions(alias.getQualifiedName(), this);
    }

    @Override
    @NonNull
    public ServerRolePermissions rename(String name) {
        return new ServerRolePermissions(DSL.name(name), null);
    }

    @Override
    @NonNull
    public ServerRolePermissions rename(Name name) {
        return new ServerRolePermissions(name, null);
    }

    @Override
    @NonNull
    public ServerRolePermissions rename(Table<?> name) {
        return new ServerRolePermissions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row4<Integer, Integer, Integer, Snowflake> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Snowflake, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Snowflake, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
