/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Atropos;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.UsersRecord;
import dev.laarryy.atropos.utils.converters.LongToSnowflakeConverter;
import dev.laarryy.atropos.utils.converters.SnowflakeToLongConverter;
import dev.laarryy.atropos.jooq.tables.Punishments.PunishmentsPath;
import dev.laarryy.atropos.jooq.tables.ServerCommandUses.ServerCommandUsesPath;
import dev.laarryy.atropos.jooq.tables.ServerMessages.ServerMessagesPath;
import dev.laarryy.atropos.jooq.tables.ServerUser.ServerUserPath;
import discord4j.common.util.Snowflake;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>atropos.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>atropos.users.id</code>.
     */
    public final TableField<UsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>atropos.users.user_id_snowflake</code>.
     */
    public final TableField<UsersRecord, Long> USER_ID_SNOWFLAKE = createField(DSL.name("user_id_snowflake"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "", new LongToSnowflakeConverter());

    /**
     * The column <code>atropos.users.date</code>.
     */
    public final TableField<UsersRecord, Instant> DATE = createField(DSL.name("date"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INSTANT)), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>atropos.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>atropos.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>atropos.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersPath extends Users implements Path<UsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsersPath(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersPath(Name alias, Table<UsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersPath as(String alias) {
            return new UsersPath(DSL.name(alias), this);
        }

        @Override
        public UsersPath as(Name alias) {
            return new UsersPath(alias, this);
        }

        @Override
        public UsersPath as(Table<?> alias) {
            return new UsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Atropos.ATROPOS;
    }

    @Override
    public Identity<UsersRecord, Integer> getIdentity() {
        return (Identity<UsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_USERS_ID_UNIQUE, Keys.KEY_USERS_USER_ID_UNIQUE);
    }

    private transient PunishmentsPath _punishmentsIbfk_1;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.punishments</code> table, via the
     * <code>punishments_ibfk_1</code> key
     */
    public PunishmentsPath punishmentsIbfk_1() {
        if (_punishmentsIbfk_1 == null)
            _punishmentsIbfk_1 = new PunishmentsPath(this, null, Keys.PUNISHMENTS_IBFK_1.getInverseKey());

        return _punishmentsIbfk_1;
    }

    private transient PunishmentsPath _punishmentsUsersIdFk;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.punishments</code> table, via the
     * <code>punishments_users_id_fk</code> key
     */
    public PunishmentsPath punishmentsUsersIdFk() {
        if (_punishmentsUsersIdFk == null)
            _punishmentsUsersIdFk = new PunishmentsPath(this, null, Keys.PUNISHMENTS_USERS_ID_FK.getInverseKey());

        return _punishmentsUsersIdFk;
    }

    private transient ServerCommandUsesPath _serverCommandUses;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_command_uses</code> table
     */
    public ServerCommandUsesPath serverCommandUses() {
        if (_serverCommandUses == null)
            _serverCommandUses = new ServerCommandUsesPath(this, null, Keys.SERVER_COMMAND_USES_USERS_ID_FK.getInverseKey());

        return _serverCommandUses;
    }

    private transient ServerMessagesPath _serverMessages;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_messages</code> table
     */
    public ServerMessagesPath serverMessages() {
        if (_serverMessages == null)
            _serverMessages = new ServerMessagesPath(this, null, Keys.SERVER_MESSAGES_USERS_ID_FK.getInverseKey());

        return _serverMessages;
    }

    private transient ServerUserPath _serverUser;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_user</code> table
     */
    public ServerUserPath serverUser() {
        if (_serverUser == null)
            _serverUser = new ServerUserPath(this, null, Keys.SERVER_USER_IBFK_1.getInverseKey());

        return _serverUser;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition condition) {
        return new Users(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
