/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.PermissionsRecord;

import java.util.Arrays;
import java.util.List;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Permissions extends TableImpl<PermissionsRecord> {

    private static final long serialVersionUID = 1L;

    public static final Permissions PERMISSIONS = new Permissions();

    @Override
    @NonNull
    public Class<PermissionsRecord> getRecordType() {
        return PermissionsRecord.class;
    }

    public final TableField<PermissionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<PermissionsRecord, String> PERMISSION = createField(DSL.name("permission"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Permissions(Name alias, Table<PermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Permissions(Name alias, Table<PermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public Permissions(String alias) {
        this(DSL.name(alias), PERMISSIONS);
    }

    public Permissions(Name alias) {
        this(alias, PERMISSIONS);
    }

    public Permissions() {
        this(DSL.name("permissions"), null);
    }

    public <O extends Record> Permissions(Table<O> child, ForeignKey<O, PermissionsRecord> key) {
        super(child, key, PERMISSIONS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return null;
    }

    @Override
    @NonNull
    public Identity<PermissionsRecord, Integer> getIdentity() {
        return (Identity<PermissionsRecord, Integer>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<PermissionsRecord> getPrimaryKey() {
        return Keys.KEY_PERMISSIONS_PRIMARY;
    }

    @Override
    @NonNull
    public List<UniqueKey<PermissionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PERMISSIONS_PERMISSION);
    }

    @Override
    @NonNull
    public Permissions as(String alias) {
        return new Permissions(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public Permissions as(Name alias) {
        return new Permissions(alias, this);
    }

    @Override
    @NonNull
    public Permissions as(Table<?> alias) {
        return new Permissions(alias.getQualifiedName(), this);
    }

    @Override
    @NonNull
    public Permissions rename(String name) {
        return new Permissions(DSL.name(name), null);
    }

    @Override
    @NonNull
    public Permissions rename(Name name) {
        return new Permissions(name, null);
    }

    @Override
    @NonNull
    public Permissions rename(Table<?> name) {
        return new Permissions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
