/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Atropos;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.PermissionsRecord;
import jooq.tables.ServerRolePermissions.ServerRolePermissionsPath;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Permissions extends TableImpl<PermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>atropos.permissions</code>
     */
    public static final Permissions PERMISSIONS = new Permissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionsRecord> getRecordType() {
        return PermissionsRecord.class;
    }

    /**
     * The column <code>atropos.permissions.id</code>.
     */
    public final TableField<PermissionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>atropos.permissions.permission</code>.
     */
    public final TableField<PermissionsRecord, String> PERMISSION = createField(DSL.name("permission"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Permissions(Name alias, Table<PermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Permissions(Name alias, Table<PermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>atropos.permissions</code> table reference
     */
    public Permissions(String alias) {
        this(DSL.name(alias), PERMISSIONS);
    }

    /**
     * Create an aliased <code>atropos.permissions</code> table reference
     */
    public Permissions(Name alias) {
        this(alias, PERMISSIONS);
    }

    /**
     * Create a <code>atropos.permissions</code> table reference
     */
    public Permissions() {
        this(DSL.name("permissions"), null);
    }

    public <O extends Record> Permissions(Table<O> path, ForeignKey<O, PermissionsRecord> childPath, InverseForeignKey<O, PermissionsRecord> parentPath) {
        super(path, childPath, parentPath, PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PermissionsPath extends Permissions implements Path<PermissionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PermissionsPath(Table<O> path, ForeignKey<O, PermissionsRecord> childPath, InverseForeignKey<O, PermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PermissionsPath(Name alias, Table<PermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PermissionsPath as(String alias) {
            return new PermissionsPath(DSL.name(alias), this);
        }

        @Override
        public PermissionsPath as(Name alias) {
            return new PermissionsPath(alias, this);
        }

        @Override
        public PermissionsPath as(Table<?> alias) {
            return new PermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Atropos.ATROPOS;
    }

    @Override
    public Identity<PermissionsRecord, Integer> getIdentity() {
        return (Identity<PermissionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PermissionsRecord> getPrimaryKey() {
        return Keys.KEY_PERMISSIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PermissionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PERMISSIONS_PERMISSION);
    }

    private transient ServerRolePermissionsPath _serverRolePermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>atropos.server_role_permissions</code> table
     */
    public ServerRolePermissionsPath serverRolePermissions() {
        if (_serverRolePermissions == null)
            _serverRolePermissions = new ServerRolePermissionsPath(this, null, Keys.SERVER_ROLE_PERMISSIONS_IBFK_2.getInverseKey());

        return _serverRolePermissions;
    }

    @Override
    public Permissions as(String alias) {
        return new Permissions(DSL.name(alias), this);
    }

    @Override
    public Permissions as(Name alias) {
        return new Permissions(alias, this);
    }

    @Override
    public Permissions as(Table<?> alias) {
        return new Permissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(String name) {
        return new Permissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(Name name) {
        return new Permissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(Table<?> name) {
        return new Permissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Condition condition) {
        return new Permissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
