/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables;


import dev.laarryy.atropos.jooq.Converters;
import dev.laarryy.atropos.jooq.Keys;
import dev.laarryy.atropos.jooq.tables.records.ServerCommandUsesRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerCommandUses extends TableImpl<ServerCommandUsesRecord> {

    private static final long serialVersionUID = 1L;

    public static final ServerCommandUses SERVER_COMMAND_USES = new ServerCommandUses();

    @Override
    @NonNull
    public Class<ServerCommandUsesRecord> getRecordType() {
        return ServerCommandUsesRecord.class;
    }

    public final TableField<ServerCommandUsesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    public final TableField<ServerCommandUsesRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<ServerCommandUsesRecord, Integer> COMMAND_USER_ID = createField(DSL.name("command_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<ServerCommandUsesRecord, String> COMMAND_CONTENTS = createField(DSL.name("command_contents"), SQLDataType.VARCHAR(4000).nullable(false), this, "");

    public final TableField<ServerCommandUsesRecord, Instant> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)).asConvertedDataType(Converters.INSTANT), this, "");

    public final TableField<ServerCommandUsesRecord, Boolean> SUCCESS = createField(DSL.name("success"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.TINYINT)).asConvertedDataType(Converters.BOOLEAN), this, "");

    private ServerCommandUses(Name alias, Table<ServerCommandUsesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerCommandUses(Name alias, Table<ServerCommandUsesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public ServerCommandUses(String alias) {
        this(DSL.name(alias), SERVER_COMMAND_USES);
    }

    public ServerCommandUses(Name alias) {
        this(alias, SERVER_COMMAND_USES);
    }

    public ServerCommandUses() {
        this(DSL.name("server_command_uses"), null);
    }

    public <O extends Record> ServerCommandUses(Table<O> child, ForeignKey<O, ServerCommandUsesRecord> key) {
        super(child, key, SERVER_COMMAND_USES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return null;
    }

    @Override
    @NonNull
    public Identity<ServerCommandUsesRecord, Integer> getIdentity() {
        return (Identity<ServerCommandUsesRecord, Integer>) super.getIdentity();
    }

    @Override
    @NonNull
    public UniqueKey<ServerCommandUsesRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_COMMAND_USES_PRIMARY;
    }

    @Override
    @NonNull
    public List<UniqueKey<ServerCommandUsesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SERVER_COMMAND_USES_SERVER_COMMAND_USES_ID_UINDEX);
    }

    @Override
    @NonNull
    public List<ForeignKey<ServerCommandUsesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_COMMAND_USES_SERVERS_ID_FK, Keys.SERVER_COMMAND_USES_USERS_ID_FK);
    }

    private transient Servers _servers;
    private transient Users _users;

    public Servers servers() {
        if (_servers == null)
            _servers = new Servers(this, Keys.SERVER_COMMAND_USES_SERVERS_ID_FK);

        return _servers;
    }

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.SERVER_COMMAND_USES_USERS_ID_FK);

        return _users;
    }

    @Override
    @NonNull
    public ServerCommandUses as(String alias) {
        return new ServerCommandUses(DSL.name(alias), this);
    }

    @Override
    @NonNull
    public ServerCommandUses as(Name alias) {
        return new ServerCommandUses(alias, this);
    }

    @Override
    @NonNull
    public ServerCommandUses as(Table<?> alias) {
        return new ServerCommandUses(alias.getQualifiedName(), this);
    }

    @Override
    @NonNull
    public ServerCommandUses rename(String name) {
        return new ServerCommandUses(DSL.name(name), null);
    }

    @Override
    @NonNull
    public ServerCommandUses rename(Name name) {
        return new ServerCommandUses(name, null);
    }

    @Override
    @NonNull
    public ServerCommandUses rename(Table<?> name) {
        return new ServerCommandUses(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row6<Integer, Integer, Integer, String, Instant, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super Integer, ? super String, ? super Instant, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super Integer, ? super String, ? super Instant, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
