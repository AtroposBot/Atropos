/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables.records;


import dev.laarryy.atropos.jooq.tables.Servers;
import discord4j.common.util.Snowflake;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.Instant;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServersRecord extends UpdatableRecordImpl<ServersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>atropos.servers.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>atropos.servers.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>atropos.servers.date</code>.
     */
    public void setDate(Instant value) {
        set(1, value);
    }

    /**
     * Getter for <code>atropos.servers.date</code>.
     */
    public Instant getDate() {
        return (Instant) get(1);
    }

    /**
     * Setter for <code>atropos.servers.server_id_snowflake</code>.
     */
    public void setServerIdSnowflake(Snowflake value) {
        set(2, value);
    }

    /**
     * Getter for <code>atropos.servers.server_id_snowflake</code>.
     */
    public Snowflake getServerIdSnowflake() {
        return (Snowflake) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServersRecord
     */
    public ServersRecord() {
        super(Servers.SERVERS);
    }

    /**
     * Create a detached, initialised ServersRecord
     */
    public ServersRecord(Integer id, Instant date, Snowflake serverIdSnowflake) {
        super(Servers.SERVERS);

        setId(id);
        setDate(date);
        setServerIdSnowflake(serverIdSnowflake);
        resetChangedOnNotNull();
    }
}
