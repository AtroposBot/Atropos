/*
 * This file is generated by jOOQ.
 */
package dev.laarryy.atropos.jooq.tables.records;


import dev.laarryy.atropos.jooq.tables.Servers;

import org.checkerframework.checker.nullness.qual.NonNull;
import discord4j.common.util.Snowflake;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.Instant;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServersRecord extends UpdatableRecordImpl<ServersRecord> implements Record3<Integer, Instant, Snowflake> {

    private static final long serialVersionUID = 1L;

    public ServersRecord setId(@NonNull Integer value) {
        set(0, value);
        return this;
    }

    @NonNull
    public Integer getId() {
        return (Integer) get(0);
    }

    public ServersRecord setDate(@NonNull Instant value) {
        set(1, value);
        return this;
    }

    @NonNull
    public Instant getDate() {
        return (Instant) get(1);
    }

    public ServersRecord setServerId(@NonNull Snowflake value) {
        set(2, value);
        return this;
    }

    @NonNull
    public Snowflake getServerId() {
        return (Snowflake) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NonNull
    public Row3<Integer, Instant, Snowflake> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NonNull
    public Row3<Integer, Instant, Snowflake> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NonNull
    public Field<Integer> field1() {
        return Servers.SERVERS.ID;
    }

    @Override
    @NonNull
    public Field<Instant> field2() {
        return Servers.SERVERS.DATE;
    }

    @Override
    @NonNull
    public Field<Snowflake> field3() {
        return Servers.SERVERS.SERVER_ID;
    }

    @Override
    @NonNull
    public Integer component1() {
        return getId();
    }

    @Override
    @NonNull
    public Instant component2() {
        return getDate();
    }

    @Override
    @NonNull
    public Snowflake component3() {
        return getServerId();
    }

    @Override
    @NonNull
    public Integer value1() {
        return getId();
    }

    @Override
    @NonNull
    public Instant value2() {
        return getDate();
    }

    @Override
    @NonNull
    public Snowflake value3() {
        return getServerId();
    }

    @Override
    @NonNull
    public ServersRecord value1(@NonNull Integer value) {
        setId(value);
        return this;
    }

    @Override
    @NonNull
    public ServersRecord value2(@NonNull Instant value) {
        setDate(value);
        return this;
    }

    @Override
    @NonNull
    public ServersRecord value3(@NonNull Snowflake value) {
        setServerId(value);
        return this;
    }

    @Override
    @NonNull
    public ServersRecord values(@NonNull Integer value1, @NonNull Instant value2, @NonNull Snowflake value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    public ServersRecord() {
        super(Servers.SERVERS);
    }

    public ServersRecord(@NonNull Integer id, @NonNull Instant date, @NonNull Snowflake serverId) {
        super(Servers.SERVERS);

        setId(id);
        setDate(date);
        setServerId(serverId);
    }
}
